Techstack,Links,Description
"Swift, SwiftUI, iOS, mobile app development",Not Available,"Developed an iOS application that allows users to search for real-time events in the US via the Ticketmaster APIs. Key features include event discovery, detailed event information, a wishlist for managing favorite events, and social media sharing. The app features a visually engaging interface built using SwiftUI, with elements such as splash screens, NavigationBar, TabView, ScrollView, Carousels, Page Control, and SF Symbols for icons. Integrated smooth navigation and responsive design to deliver an enhanced user experience."
"Angular, Node.js, Express.js, MongoDB, RESTAPI, GCP, Cloud Deployment",Not Available,"Created a MEAN stack web application that allows users to search for events in real time using the Ticketmaster APIs. The Angular frontend is composed of five core components (eventsearch, info, artist, venue, favorites) and two routes (search, favorites), leveraging Angular Bootstrap for responsive web design. The backend, built with Node.js and Express.js, consists of five endpoints to handle event search, event information, venue details, artist info, and autocomplete. The app also allows users to manage a wishlist and share event information on social media."
"Python, Langchain, Google Generative AI, Gemini, Instruct Embedding, FAISS, Prompt Template",https://github.com/Sudo-Swapnil/QnA-Bot,"Developed a Customer Support Bot to assist users with company products and services. Leveraged Langchain to load an FAQ dataset and generated embeddings using Huggingface�s Instruct Embedding model. Integrated FAISS for high-performance similarity search, enabling efficient retrieval of relevant information. Google Generative AI (Gemini 1.5 pro) was utilized to produce accurate and context-aware answers based on the FAQ data, ensuring precise and concise responses to user queries."
"PySpark, Elasticsearch",Not Available,"Implemented a robust data ingestion pipeline to collect KYC data from various sources, including database dumps, APIs, and flat files. Applied normalization, transformation, cleaning, and schema alignment processes before ingesting the data into Elasticsearch using PySpark."
"FastAPI, Elasticsearch, OAuth2, JWT, Python",Not Available,"Developed a RESTful API using FastAPI to generate Elasticsearch queries via a custom query builder, fetch results, and return resolved entities. Secured the API using OAuth2 with Password and JWT tokens for authentication and hashing."
"Python programming, python modules",Not Available,"Created a high-performance Python module to parse and augment unstructured or partial addresses into a structured format, breaking them down into house number, sub-district, district, state, and zip code. The module processed 200,000 addresses per hour, with an average processing time of 18 ms per address."
"Python,  Encoder, Embedding,  Random Forest, SVM, BERT, PyTorch, FastAPI, Streamlit, Docker",Not Available,"Designed and implemented a web scraping pipeline to collect a diverse dataset of text articles for building a custom domain classifier. Preprocessed the data with text cleaning, tokenization, and normalization, then embedded the text using Google�s Universal Sentence Encoder. Experimented with Random Forest and SVM models, but BERT-based deep learning models outperformed them in scalability and accuracy. Fine-tuned a BERT classifier using PyTorch, achieving 96% accuracy in classifying text domains. Deployed the solution with a FastAPI endpoint, a user-friendly Streamlit UI, and Docker for seamless deployment."
"Autonomous Driving, Python, Markov Chain Model, Visualization, OOPs, Agile",Not Available,"As a System Software Intern, I developed a comfort evaluation model for autonomous drives using Python. I extracted sensor data from drive simulations, constructed a Markov Chain model to define states, and created a Transition Probability (TP) matrix from ideal drive simulations. By applying the model to test drives, I assessed deviations in state transitions to evaluate drive comfort. I also visualized the results by plotting the TP matrix against timestamps, providing actionable insights to reduce future simulation evaluation time. Leveraged OOP and Agile methodologies to ensure modular development and efficient project execution."